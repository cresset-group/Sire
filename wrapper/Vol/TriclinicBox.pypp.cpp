// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TriclinicBox.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/countflops.h"

#include "SireError/errors.h"

#include "SireMaths/rangenerator.h"

#include "SireStream/datastream.h"

#include "coordgroup.h"

#include "triclinicbox.h"

#include <QDebug>

#include <QList>

#include <QMutex>

#include <QPair>

#include <cmath>

#include <limits>

#include "triclinicbox.h"

SireVol::TriclinicBox __copy__(const SireVol::TriclinicBox &other){ return SireVol::TriclinicBox(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_TriclinicBox_class(){

    { //::SireVol::TriclinicBox
        typedef bp::class_< SireVol::TriclinicBox, bp::bases< SireVol::Cartesian, SireVol::Space, SireBase::Property > > TriclinicBox_exposer_t;
        TriclinicBox_exposer_t TriclinicBox_exposer = TriclinicBox_exposer_t( "TriclinicBox", "\nA TriclinicBox is a volume  that represents standard periodic boundary conditions\n(a 3D box replicated to infinity along all three dimensions).\n\nAuthor: Christopher Woods\n", bp::init< >("Construct a default TriclinicBox volume (maximum volume)") );
        bp::scope TriclinicBox_scope( TriclinicBox_exposer );
        TriclinicBox_exposer.def( bp::init< SireMaths::Vector const &, SireMaths::Vector const &, SireMaths::Vector const & >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") ), "Construct a TriclinicBox with the specified lattice vectors") );
        TriclinicBox_exposer.def( bp::init< SireVol::TriclinicBox const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireVol::TriclinicBox::cellMatrix
        
            typedef ::SireMaths::Matrix ( ::SireVol::TriclinicBox::*cellMatrix_function_type)(  ) const;
            cellMatrix_function_type cellMatrix_function_value( &::SireVol::TriclinicBox::cellMatrix );
            
            TriclinicBox_exposer.def( 
                "cellMatrix"
                , cellMatrix_function_value
                , "Return the cell matrix." );
        
        }
        { //::SireVol::TriclinicBox::cubic
        
            typedef ::SireVol::TriclinicBox ( *cubic_function_type )( double );
            cubic_function_type cubic_function_value( &::SireVol::TriclinicBox::cubic );
            
            TriclinicBox_exposer.def( 
                "cubic"
                , cubic_function_value
                , ( bp::arg("d") )
                , "Return a cubic TriclinicBox with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::isCartesian
        
            typedef bool ( ::SireVol::TriclinicBox::*isCartesian_function_type)(  ) const;
            isCartesian_function_type isCartesian_function_value( &::SireVol::TriclinicBox::isCartesian );
            
            TriclinicBox_exposer.def( 
                "isCartesian"
                , isCartesian_function_value
                , "A Triclinic box is cartesian" );
        
        }
        { //::SireVol::TriclinicBox::isPeriodic
        
            typedef bool ( ::SireVol::TriclinicBox::*isPeriodic_function_type)(  ) const;
            isPeriodic_function_type isPeriodic_function_value( &::SireVol::TriclinicBox::isPeriodic );
            
            TriclinicBox_exposer.def( 
                "isPeriodic"
                , isPeriodic_function_value
                , "A Triclinic box is periodic" );
        
        }
        TriclinicBox_exposer.def( bp::self != bp::self );
        { //::SireVol::TriclinicBox::operator=
        
            typedef ::SireVol::TriclinicBox & ( ::SireVol::TriclinicBox::*assign_function_type)( ::SireVol::TriclinicBox const & ) ;
            assign_function_type assign_function_value( &::SireVol::TriclinicBox::operator= );
            
            TriclinicBox_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        TriclinicBox_exposer.def( bp::self == bp::self );
        { //::SireVol::TriclinicBox::rhombicDodecahedronHexagon
        
            typedef ::SireVol::TriclinicBox ( *rhombicDodecahedronHexagon_function_type )( double );
            rhombicDodecahedronHexagon_function_type rhombicDodecahedronHexagon_function_value( &::SireVol::TriclinicBox::rhombicDodecahedronHexagon );
            
            TriclinicBox_exposer.def( 
                "rhombicDodecahedronHexagon"
                , rhombicDodecahedronHexagon_function_value
                , ( bp::arg("d") )
                , "Return a hexagonal rhombic dodecahedron TriclinicBox with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::rhombicDodecahedronSquare
        
            typedef ::SireVol::TriclinicBox ( *rhombicDodecahedronSquare_function_type )( double );
            rhombicDodecahedronSquare_function_type rhombicDodecahedronSquare_function_value( &::SireVol::TriclinicBox::rhombicDodecahedronSquare );
            
            TriclinicBox_exposer.def( 
                "rhombicDodecahedronSquare"
                , rhombicDodecahedronSquare_function_value
                , ( bp::arg("d") )
                , "Return a square rhombic dodecahedron TriclinicBox with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::rotationMatrix
        
            typedef ::SireMaths::Matrix const & ( ::SireVol::TriclinicBox::*rotationMatrix_function_type)(  ) const;
            rotationMatrix_function_type rotationMatrix_function_value( &::SireVol::TriclinicBox::rotationMatrix );
            
            TriclinicBox_exposer.def( 
                "rotationMatrix"
                , rotationMatrix_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the rotation matrix." );
        
        }
        { //::SireVol::TriclinicBox::toString
        
            typedef ::QString ( ::SireVol::TriclinicBox::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireVol::TriclinicBox::toString );
            
            TriclinicBox_exposer.def( 
                "toString"
                , toString_function_value
                , "Return a string representation of this space" );
        
        }
        { //::SireVol::TriclinicBox::truncatedOctahedron
        
            typedef ::SireVol::TriclinicBox ( *truncatedOctahedron_function_type )( double );
            truncatedOctahedron_function_type truncatedOctahedron_function_value( &::SireVol::TriclinicBox::truncatedOctahedron );
            
            TriclinicBox_exposer.def( 
                "truncatedOctahedron"
                , truncatedOctahedron_function_value
                , ( bp::arg("d") )
                , "Return a truncated octahedron with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::TriclinicBox::typeName );
            
            TriclinicBox_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireVol::TriclinicBox::vector0
        
            typedef ::SireMaths::Vector const & ( ::SireVol::TriclinicBox::*vector0_function_type)(  ) const;
            vector0_function_type vector0_function_value( &::SireVol::TriclinicBox::vector0 );
            
            TriclinicBox_exposer.def( 
                "vector0"
                , vector0_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the first box vector." );
        
        }
        { //::SireVol::TriclinicBox::vector1
        
            typedef ::SireMaths::Vector const & ( ::SireVol::TriclinicBox::*vector1_function_type)(  ) const;
            vector1_function_type vector1_function_value( &::SireVol::TriclinicBox::vector1 );
            
            TriclinicBox_exposer.def( 
                "vector1"
                , vector1_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the second box vector." );
        
        }
        { //::SireVol::TriclinicBox::vector2
        
            typedef ::SireMaths::Vector const & ( ::SireVol::TriclinicBox::*vector2_function_type)(  ) const;
            vector2_function_type vector2_function_value( &::SireVol::TriclinicBox::vector2 );
            
            TriclinicBox_exposer.def( 
                "vector2"
                , vector2_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the third box vector." );
        
        }
        TriclinicBox_exposer.staticmethod( "cubic" );
        TriclinicBox_exposer.staticmethod( "rhombicDodecahedronHexagon" );
        TriclinicBox_exposer.staticmethod( "rhombicDodecahedronSquare" );
        TriclinicBox_exposer.staticmethod( "truncatedOctahedron" );
        TriclinicBox_exposer.staticmethod( "typeName" );
        TriclinicBox_exposer.def( "__copy__", &__copy__);
        TriclinicBox_exposer.def( "__deepcopy__", &__copy__);
        TriclinicBox_exposer.def( "clone", &__copy__);
        TriclinicBox_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireVol::TriclinicBox >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TriclinicBox_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireVol::TriclinicBox >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TriclinicBox_exposer.def( "__str__", &__str__< ::SireVol::TriclinicBox > );
        TriclinicBox_exposer.def( "__repr__", &__str__< ::SireVol::TriclinicBox > );
    }

}
