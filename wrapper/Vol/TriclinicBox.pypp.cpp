// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TriclinicBox.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/countflops.h"

#include "SireError/errors.h"

#include "SireMaths/rangenerator.h"

#include "SireStream/datastream.h"

#include "coordgroup.h"

#include "triclinicbox.h"

#include <QDebug>

#include <QList>

#include <QMutex>

#include <QPair>

#include <cmath>

#include <limits>

#include "triclinicbox.h"

SireVol::TriclinicBox __copy__(const SireVol::TriclinicBox &other){ return SireVol::TriclinicBox(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_TriclinicBox_class(){

    { //::SireVol::TriclinicBox
        typedef bp::class_< SireVol::TriclinicBox, bp::bases< SireVol::Cartesian, SireVol::Space, SireBase::Property > > TriclinicBox_exposer_t;
        TriclinicBox_exposer_t TriclinicBox_exposer = TriclinicBox_exposer_t( "TriclinicBox", "\nA TriclinicBox is a volume  that represents standard periodic boundary conditions\n(a 3D box replicated to infinity along all three dimensions).\n\nAuthor: Christopher Woods\n", bp::init< >("Construct a default TriclinicBox volume (maximum volume)") );
        bp::scope TriclinicBox_scope( TriclinicBox_exposer );
        TriclinicBox_exposer.def( bp::init< SireMaths::Vector const &, SireMaths::Vector const &, SireMaths::Vector const & >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") ), "Construct a TriclinicBox with the specified lattice vectors") );
        TriclinicBox_exposer.def( bp::init< SireVol::TriclinicBox const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireVol::TriclinicBox::calcDist
        
            typedef double ( ::SireVol::TriclinicBox::*calcDist_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::TriclinicBox::calcDist );
            
            TriclinicBox_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("point0"), bp::arg("point1") )
                , "Calculate the distance between two points" );
        
        }
        { //::SireVol::TriclinicBox::calcDist
        
            typedef double ( ::SireVol::TriclinicBox::*calcDist_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::TriclinicBox::calcDist );
            
            TriclinicBox_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") )
                , "Populate the matrix mat with the distances between all of the\natoms of the two CoordGroups. Return the shortest distance^2 between the two\nCoordGroups." );
        
        }
        { //::SireVol::TriclinicBox::calcDist
        
            typedef double ( ::SireVol::TriclinicBox::*calcDist_function_type)( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistMatrix & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::TriclinicBox::calcDist );
            
            TriclinicBox_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("mat") )
                , "Populate the matrix mat with the distances between all of the\natoms of the passed CoordGroup to the passed point. Return the shortest\ndistance." );
        
        }
        { //::SireVol::TriclinicBox::calcDist2
        
            typedef double ( ::SireVol::TriclinicBox::*calcDist2_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::TriclinicBox::calcDist2 );
            
            TriclinicBox_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("point0"), bp::arg("point1") )
                , "Calculate the distance squared between two points" );
        
        }
        { //::SireVol::TriclinicBox::calcDist2
        
            typedef double ( ::SireVol::TriclinicBox::*calcDist2_function_type)( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistMatrix & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::TriclinicBox::calcDist2 );
            
            TriclinicBox_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("mat") )
                , "Populate the matrix mat with the distances squared between all of the\natoms of the passed CoordGroup to the passed point. Return the shortest\ndistance." );
        
        }
        { //::SireVol::TriclinicBox::calcDist2
        
            typedef double ( ::SireVol::TriclinicBox::*calcDist2_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::TriclinicBox::calcDist2 );
            
            TriclinicBox_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") )
                , "Populate the matrix mat with the distances^2 between all of the\natoms of the two CoordGroups. Return the shortest distance between the\ntwo CoordGroups." );
        
        }
        { //::SireVol::TriclinicBox::calcDistVector
        
            typedef ::SireMaths::DistVector ( ::SireVol::TriclinicBox::*calcDistVector_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDistVector_function_type calcDistVector_function_value( &::SireVol::TriclinicBox::calcDistVector );
            
            TriclinicBox_exposer.def( 
                "calcDistVector"
                , calcDistVector_function_value
                , ( bp::arg("point0"), bp::arg("point1") )
                , "Calculate the distance vector between two points" );
        
        }
        { //::SireVol::TriclinicBox::calcDistVectors
        
            typedef double ( ::SireVol::TriclinicBox::*calcDistVectors_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistVectorMatrix & ) const;
            calcDistVectors_function_type calcDistVectors_function_value( &::SireVol::TriclinicBox::calcDistVectors );
            
            TriclinicBox_exposer.def( 
                "calcDistVectors"
                , calcDistVectors_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") )
                , "Populate the matrix distmat between all the points of the two CoordGroups\ngroup1 and group2 - the returned matrix has the vectors pointing\nfrom each point in group1 to each point in group2. This returns\nthe shortest distance between two points in the group" );
        
        }
        { //::SireVol::TriclinicBox::calcDistVectors
        
            typedef double ( ::SireVol::TriclinicBox::*calcDistVectors_function_type)( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistVectorMatrix & ) const;
            calcDistVectors_function_type calcDistVectors_function_value( &::SireVol::TriclinicBox::calcDistVectors );
            
            TriclinicBox_exposer.def( 
                "calcDistVectors"
                , calcDistVectors_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("distmat") )
                , "Populate the matrix distmat between all the points passed CoordGroup\nto the point point - the returned matrix has the vectors pointing\nfrom the point to each point in group. This returns\nthe shortest distance." );
        
        }
        { //::SireVol::TriclinicBox::calcInvDist
        
            typedef double ( ::SireVol::TriclinicBox::*calcInvDist_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist_function_type calcInvDist_function_value( &::SireVol::TriclinicBox::calcInvDist );
            
            TriclinicBox_exposer.def( 
                "calcInvDist"
                , calcInvDist_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") )
                , "Populate the matrix mat with the inverse distances between all of the\natoms of the two CoordGroups. Return the shortest distance between the two CoordGroups." );
        
        }
        { //::SireVol::TriclinicBox::calcInvDist2
        
            typedef double ( ::SireVol::TriclinicBox::*calcInvDist2_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist2_function_type calcInvDist2_function_value( &::SireVol::TriclinicBox::calcInvDist2 );
            
            TriclinicBox_exposer.def( 
                "calcInvDist2"
                , calcInvDist2_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") )
                , "Populate the matrix mat with the inverse distances^2 between all of the\natoms of the two CoordGroups. Return the shortest distance between the two CoordGroups." );
        
        }
        { //::SireVol::TriclinicBox::cellMatrix
        
            typedef ::SireMaths::Matrix ( ::SireVol::TriclinicBox::*cellMatrix_function_type)(  ) const;
            cellMatrix_function_type cellMatrix_function_value( &::SireVol::TriclinicBox::cellMatrix );
            
            TriclinicBox_exposer.def( 
                "cellMatrix"
                , cellMatrix_function_value
                , "Return the cell matrix." );
        
        }
        { //::SireVol::TriclinicBox::cubic
        
            typedef ::SireVol::TriclinicBox ( *cubic_function_type )( double );
            cubic_function_type cubic_function_value( &::SireVol::TriclinicBox::cubic );
            
            TriclinicBox_exposer.def( 
                "cubic"
                , cubic_function_value
                , ( bp::arg("d") )
                , "Return a cubic TriclinicBox with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::isCartesian
        
            typedef bool ( ::SireVol::TriclinicBox::*isCartesian_function_type)(  ) const;
            isCartesian_function_type isCartesian_function_value( &::SireVol::TriclinicBox::isCartesian );
            
            TriclinicBox_exposer.def( 
                "isCartesian"
                , isCartesian_function_value
                , "A Triclinic box is cartesian" );
        
        }
        { //::SireVol::TriclinicBox::isPeriodic
        
            typedef bool ( ::SireVol::TriclinicBox::*isPeriodic_function_type)(  ) const;
            isPeriodic_function_type isPeriodic_function_value( &::SireVol::TriclinicBox::isPeriodic );
            
            TriclinicBox_exposer.def( 
                "isPeriodic"
                , isPeriodic_function_value
                , "A Triclinic box is periodic" );
        
        }
        TriclinicBox_exposer.def( bp::self != bp::self );
        { //::SireVol::TriclinicBox::operator=
        
            typedef ::SireVol::TriclinicBox & ( ::SireVol::TriclinicBox::*assign_function_type)( ::SireVol::TriclinicBox const & ) ;
            assign_function_type assign_function_value( &::SireVol::TriclinicBox::operator= );
            
            TriclinicBox_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        TriclinicBox_exposer.def( bp::self == bp::self );
        { //::SireVol::TriclinicBox::rhombicDodecahedronHexagon
        
            typedef ::SireVol::TriclinicBox ( *rhombicDodecahedronHexagon_function_type )( double );
            rhombicDodecahedronHexagon_function_type rhombicDodecahedronHexagon_function_value( &::SireVol::TriclinicBox::rhombicDodecahedronHexagon );
            
            TriclinicBox_exposer.def( 
                "rhombicDodecahedronHexagon"
                , rhombicDodecahedronHexagon_function_value
                , ( bp::arg("d") )
                , "Return a hexagonal rhombic dodecahedron TriclinicBox with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::rhombicDodecahedronSquare
        
            typedef ::SireVol::TriclinicBox ( *rhombicDodecahedronSquare_function_type )( double );
            rhombicDodecahedronSquare_function_type rhombicDodecahedronSquare_function_value( &::SireVol::TriclinicBox::rhombicDodecahedronSquare );
            
            TriclinicBox_exposer.def( 
                "rhombicDodecahedronSquare"
                , rhombicDodecahedronSquare_function_value
                , ( bp::arg("d") )
                , "Return a square rhombic dodecahedron TriclinicBox with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::rotationMatrix
        
            typedef ::SireMaths::Matrix const & ( ::SireVol::TriclinicBox::*rotationMatrix_function_type)(  ) const;
            rotationMatrix_function_type rotationMatrix_function_value( &::SireVol::TriclinicBox::rotationMatrix );
            
            TriclinicBox_exposer.def( 
                "rotationMatrix"
                , rotationMatrix_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the rotation matrix." );
        
        }
        { //::SireVol::TriclinicBox::setVolume
        
            typedef ::SireVol::SpacePtr ( ::SireVol::TriclinicBox::*setVolume_function_type)( ::SireUnits::Dimension::Volume ) const;
            setVolume_function_type setVolume_function_value( &::SireVol::TriclinicBox::setVolume );
            
            TriclinicBox_exposer.def( 
                "setVolume"
                , setVolume_function_value
                , ( bp::arg("volume") )
                , "Set the volume of the triclinic box." );
        
        }
        { //::SireVol::TriclinicBox::toString
        
            typedef ::QString ( ::SireVol::TriclinicBox::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireVol::TriclinicBox::toString );
            
            TriclinicBox_exposer.def( 
                "toString"
                , toString_function_value
                , "Return a string representation of this space" );
        
        }
        { //::SireVol::TriclinicBox::truncatedOctahedron
        
            typedef ::SireVol::TriclinicBox ( *truncatedOctahedron_function_type )( double );
            truncatedOctahedron_function_type truncatedOctahedron_function_value( &::SireVol::TriclinicBox::truncatedOctahedron );
            
            TriclinicBox_exposer.def( 
                "truncatedOctahedron"
                , truncatedOctahedron_function_value
                , ( bp::arg("d") )
                , "Return a truncated octahedron with image distance d." );
        
        }
        { //::SireVol::TriclinicBox::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::TriclinicBox::typeName );
            
            TriclinicBox_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireVol::TriclinicBox::vector0
        
            typedef ::SireMaths::Vector const & ( ::SireVol::TriclinicBox::*vector0_function_type)(  ) const;
            vector0_function_type vector0_function_value( &::SireVol::TriclinicBox::vector0 );
            
            TriclinicBox_exposer.def( 
                "vector0"
                , vector0_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the first box vector." );
        
        }
        { //::SireVol::TriclinicBox::vector1
        
            typedef ::SireMaths::Vector const & ( ::SireVol::TriclinicBox::*vector1_function_type)(  ) const;
            vector1_function_type vector1_function_value( &::SireVol::TriclinicBox::vector1 );
            
            TriclinicBox_exposer.def( 
                "vector1"
                , vector1_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the second box vector." );
        
        }
        { //::SireVol::TriclinicBox::vector2
        
            typedef ::SireMaths::Vector const & ( ::SireVol::TriclinicBox::*vector2_function_type)(  ) const;
            vector2_function_type vector2_function_value( &::SireVol::TriclinicBox::vector2 );
            
            TriclinicBox_exposer.def( 
                "vector2"
                , vector2_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the third box vector." );
        
        }
        { //::SireVol::TriclinicBox::volume
        
            typedef ::SireUnits::Dimension::Volume ( ::SireVol::TriclinicBox::*volume_function_type)(  ) const;
            volume_function_type volume_function_value( &::SireVol::TriclinicBox::volume );
            
            TriclinicBox_exposer.def( 
                "volume"
                , volume_function_value
                , "Get the volume of the triclinic box." );
        
        }
        TriclinicBox_exposer.staticmethod( "cubic" );
        TriclinicBox_exposer.staticmethod( "rhombicDodecahedronHexagon" );
        TriclinicBox_exposer.staticmethod( "rhombicDodecahedronSquare" );
        TriclinicBox_exposer.staticmethod( "truncatedOctahedron" );
        TriclinicBox_exposer.staticmethod( "typeName" );
        TriclinicBox_exposer.def( "__copy__", &__copy__);
        TriclinicBox_exposer.def( "__deepcopy__", &__copy__);
        TriclinicBox_exposer.def( "clone", &__copy__);
        TriclinicBox_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireVol::TriclinicBox >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TriclinicBox_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireVol::TriclinicBox >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TriclinicBox_exposer.def( "__str__", &__str__< ::SireVol::TriclinicBox > );
        TriclinicBox_exposer.def( "__repr__", &__str__< ::SireVol::TriclinicBox > );
    }

}
