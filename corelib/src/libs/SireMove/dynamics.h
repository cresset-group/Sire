/********************************************\
  *
  *  Sire - Molecular Simulation Framework
  *
  *  Copyright (C) 2009  Christopher Woods
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
  *  the Free Software Foundation; either version 2 of the License, or
  *  (at your option) any later version.
  *
  *  This program is distributed in the hope that it will be useful,
  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  *  GNU General Public License for more details.
  *
  *  You should have received a copy of the GNU General Public License
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  *  For full details of the license please see the COPYING file
  *  that should have come with this distribution.
  *
  *  You can contact the authors via the developer's mailing list
  *  at http://siremol.org
  *
\*********************************************/

#ifndef SIREMOVE_DYNAMICS_H
#define SIREMOVE_DYNAMICS_H

#include "move.h"
#include "ensemble.h"

#include "SireCAS/symbol.h"

#include "SireUnits/dimensions.h"

SIRE_BEGIN_HEADER

namespace SireMove
{
class Dynamics;
}

SIREMOVE_EXPORT QDataStream& operator<<(QDataStream&, const SireMove::Dynamics&);
SIREMOVE_EXPORT QDataStream& operator>>(QDataStream&, SireMove::Dynamics&);

namespace SireMove
{

/** This is the base class of the dynamics moves (e.g. all-atom
    molecular dynamics, or rigid body dynamics)
    
    @author Christopher Woods
*/
class SIREMOVE_EXPORT Dynamics : public Move
{

friend SIREMOVE_EXPORT QDataStream& ::operator<<(QDataStream&, const Dynamics&);
friend SIREMOVE_EXPORT QDataStream& ::operator>>(QDataStream&, Dynamics&);

public:
    Dynamics(const PropertyMap &map = PropertyMap());
    
    Dynamics(const Dynamics &other);
    
    ~Dynamics();
    
    static const char* typeName()
    {
        return "SireMove::Dynamics";
    }
    
    Ensemble ensemble() const;

protected:
    Dynamics& operator=(const Dynamics &other);
    
    bool operator==(const Dynamics &other) const;
    bool operator!=(const Dynamics &other) const;
    
    void setEnsemble(const Ensemble &ensemble);

private:
    /** The ensemble generated by this move */
    Ensemble ensmble;
};

}

SIRE_EXPOSE_CLASS( SireMove::Dynamics )

SIRE_END_HEADER

#endif
